@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using global::RentConnect.API.RentConnect.Domain.Models
@using global::RentConnect.Presentation.UI.Components.Account.Shared
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Resend Email Confirmation</PageTitle>

<style>
    body {
        background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
        color: white;
    }

    .login-container {
        max-width: 460px;
        margin: 5rem auto;
        padding: 2.5rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 1rem;
        box-shadow: 0 0 20px rgba(0,0,0,0.3);
        backdrop-filter: blur(8px);
    }

    h2 {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #fff;
    }

    .form-control, .form-check-input {
        background-color: rgba(255,255,255,0.1);
        color: white;
        border: 1px solid #aaa;
    }

        .form-control::placeholder {
            color: #ccc;
        }

    .form-label {
        color: #ddd;
    }

    a {
        color: #ffc107;
    }

        a:hover {
            color: #fff;
            text-decoration: underline;
        }

    .btn-primary {
        background-color: #0d6efd;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

    .text-danger {
        color: #f88 !important;
    }

    .alert-info {
        background-color: rgba(255,255,255,0.1);
        border: 1px solid #aaa;
        color: #ccc;
    }
</style>

<div class="login-container">
    <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <h2>Resend Email Confirmation</h2>

        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="alert alert-info text-center">@message</div>
        }

        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating mb-4">
            <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
            <label>Email</label>
            <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Resend</button>

        <div class="text-center mt-3">
            <a href="/Account/Login">Back to Login</a>
        </div>
    </EditForm>
</div>

@code {
    private string? message;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            message = "If an account exists for this email, a confirmation link has been sent.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your inbox.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
