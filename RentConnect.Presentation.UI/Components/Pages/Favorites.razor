@page "/favorites"
@inject IItemService ItemService
@inject IFavoriteService FavoriteService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@rendermode InteractiveServer

@using global::RentConnect.Presentation.UI.RentConnect.Presentation.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using global::RentConnect.Presentation.UI.IServices

<PageTitle>My Favorites</PageTitle>

<h3 class="mb-4 text-center">My Favorites</h3>

@if (favoriteItems == null)
{
    <p>Loading...</p>
}
else if (!favoriteItems.Any())
{
    <div class="alert alert-info text-center">You have no favorite items.</div>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var item in favoriteItems)
        {
            var isFavorite = favoriteItemIds.Contains(item.Id);

            <div class="col">
                <div class="card h-100 shadow-sm border-0 position-relative">
                    <button class="btn position-absolute top-0 end-0 m-2"
                            @onclick="() => ToggleFavorite(item.Id)"
                            style="z-index: 10; background: rgba(255,255,255,0.8); border-radius: 50%;">
                        <i class="@(isFavorite ? "fas fa-heart text-danger" : "far fa-heart text-muted") fa-lg"></i>
                    </button>

                    @if (item.ImageUrls?.Any() == true)
                    {
                        <img src="@item.ImageUrls.First()" class="card-img-top" style="object-fit: cover; height: 200px;" alt="Image" />
                    }
                    else
                    {
                        <img src="https://via.placeholder.com/400x200?text=No+Image" class="card-img-top" style="object-fit: cover; height: 200px;" />
                    }

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text text-muted">@item.Description</p>

                        <div class="mt-auto">
                            <p class="mb-2">
                                <strong>@item.PricePerDay</strong> <span class="text-muted">Kr/day</span>
                            </p>
                            @if (!string.IsNullOrEmpty(item.CategoryName))
                            {
                                <span class="badge bg-secondary">@item.CategoryName</span>
                            }

                            <div class="d-grid mt-3">
                                <a href="/items/@item.Id" class="btn btn-sm btn-primary">View Details</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<ItemDto> favoriteItems = new();
    private HashSet<Guid> favoriteItemIds = new();
    private bool isAuthenticated;
    private string? currentUserId;
    private bool jsExecuted = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            currentUserId = user.FindFirst(c => c.Type == "sub")?.Value
                         ?? user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            var ids = await FavoriteService.GetFavoritesForUserAsync(currentUserId!);
            favoriteItemIds = new(ids);
            await LoadItems();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isAuthenticated && !jsExecuted)
        {
            jsExecuted = true;
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "favorites");
            if (!string.IsNullOrEmpty(json))
            {
                var ids = System.Text.Json.JsonSerializer.Deserialize<List<Guid>>(json);
                favoriteItemIds = new(ids ?? []);
                await LoadItems();
                StateHasChanged();
            }
        }
    }

    private async Task LoadItems()
    {
        var allItems = await ItemService.GetAllAsync();
        favoriteItems = allItems.Where(i => favoriteItemIds.Contains(i.Id)).ToList();
    }

    private async Task ToggleFavorite(Guid itemId)
    {
        if (favoriteItemIds.Contains(itemId))
        {
            favoriteItemIds.Remove(itemId);
            if (isAuthenticated && currentUserId != null)
                await FavoriteService.RemoveFromFavoritesAsync(currentUserId, itemId);
        }
        else
        {
            favoriteItemIds.Add(itemId);
            if (isAuthenticated && currentUserId != null)
                await FavoriteService.AddToFavoritesAsync(currentUserId, itemId);
        }

        if (!isAuthenticated)
        {
            var list = favoriteItemIds.ToList();
            var json = System.Text.Json.JsonSerializer.Serialize(list);
            await JS.InvokeVoidAsync("localStorage.setItem", "favorites", json);
        }

        await LoadItems();
    }
}
