@page "/Admin/Users"
@layout AdminLayout
@attribute [Authorize(Roles = "Admin")]
@using global::RentConnect.API.RentConnect.Domain.Models
@using global::RentConnect.Presentation.UI.Components.Layout
@using global::RentConnect.Presentation.UI.Services
@using Microsoft.AspNet.SignalR
@inject UserService UserService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="user-admin-wrapper">
    <!-- Sidebar -->
    <aside class="user-list-panel">
        <div class="user-list-header">
            <h5>Users</h5>
            <input class="user-search" type="text" placeholder="Search..."
                   @oninput="OnSearchChanged"   />
        </div>
        <div class="user-list">
            @foreach (var user in filteredUsers)
            {
                <div class="user-item @(selectedUser?.Id == user.Id ? "active" : "")"
                     @onclick="() => SelectUser(user)">
                    <strong>@user.FullName</strong>
                    <span class="small text-muted">@user.Email</span>
                </div>
            }
        </div>
    </aside>

    <!-- Main View -->
    <section class="user-detail-view">
        @if (selectedUser == null)
        {
            <div class="placeholder-view">
                <p>Select a user to view details.</p>
            </div>
        }
        else
        {
            <div class="user-detail-card">
                <h4 class="mb-3">@selectedUser.FullName</h4>

                <EditForm Model="selectedUser" OnValidSubmit="SaveUser">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="fullName" @bind-Value="selectedUser.FullName" />
                        <label for="fullName">Full Name</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="email" @bind-Value="selectedUser.Email" />
                        <label for="email">Email</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="username" @bind-Value="selectedUser.UserName" />
                        <label for="username">Username</label>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <button class="btn btn-danger" @onclick="() => DeleteUser(selectedUser.Id)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-save"></i> Save
                        </button>
                    </div>
                </EditForm>
            </div>
        }
    </section>
</div>

<style>
    .user-admin-wrapper {
        display: flex;
        height: calc(100vh - 80px);
        font-family: 'Segoe UI', sans-serif;
        background: #f9f9fb;
    }

    .user-list-panel {
        width: 280px;
        background: #fff;
        border-right: 1px solid #eee;
        display: flex;
        flex-direction: column;
    }

    .user-list-header {
        padding: 1rem;
        border-bottom: 1px solid #eee;
    }

    .user-search {
        width: 100%;
        padding: 8px 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        margin-top: 0.5rem;
    }

    .user-list {
        overflow-y: auto;
        padding: 0.5rem;
        flex-grow: 1;
    }

    .user-item {
        padding: 12px;
        border-radius: 6px;
        cursor: pointer;
        margin-bottom: 4px;
        transition: background 0.2s;
    }

        .user-item:hover {
            background: #f0f0f5;
        }

        .user-item.active {
            background: #e0e7ff;
            font-weight: 600;
        }

    .user-detail-view {
        flex-grow: 1;
        padding: 2rem;
    }

    .placeholder-view {
        color: #aaa;
        font-size: 1.1rem;
        text-align: center;
        padding-top: 100px;
    }

    .user-detail-card {
        background: #fff;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        max-width: 600px;
        margin: 0 auto;
    }

    .form-floating label {
        color: #999;
    }

    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.1);
    }
</style>

@code {
    private List<ApplicationUser> users = new();
    private List<ApplicationUser> filteredUsers = new();
    private ApplicationUser? selectedUser;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        users = (await UserService.GetAllUsersAsync()).ToList();
        filteredUsers = users;
    }

    private void SelectUser(ApplicationUser user)
    {
        selectedUser = new ApplicationUser
            {
                Id = user.Id,
                FullName = user.FullName,
                Email = user.Email,
                UserName = user.UserName
            };
    }

    private async Task SaveUser()
    {
        if (selectedUser != null)
        {
            await UserService.UpdateUserAsync(selectedUser.Id, selectedUser);
            await RefreshUsers();
        }
    }

    private async Task DeleteUser(string id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirm)
        {
            await UserService.DeleteUserAsync(id);
            await RefreshUsers();
            selectedUser = null;
        }
    }

    private async Task RefreshUsers()
    {
        users = (await UserService.GetAllUsersAsync()).ToList();
        FilterUsers();
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsers = users;
            return;
        }

        var term = searchTerm.ToLower();
        filteredUsers = users.Where(u =>
            (!string.IsNullOrEmpty(u.FullName) && u.FullName.ToLower().Contains(term)) ||
            (!string.IsNullOrEmpty(u.Email) && u.Email.ToLower().Contains(term)) ||
            (!string.IsNullOrEmpty(u.UserName) && u.UserName.ToLower().Contains(term))
        ).ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterUsers();
    }
}
