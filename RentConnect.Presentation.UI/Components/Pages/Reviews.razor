@page "/Admin/Reviews"
@attribute [Authorize(Roles = "Admin")]
@using global::RentConnect.API.RentConnect.Presentation.DTOs
@using global::RentConnect.Presentation.UI.Components.Layout
@using global::RentConnect.Presentation.UI.IServices
@using Microsoft.AspNet.SignalR
@inject IReviewService ReviewService
@inject IJSRuntime JSRuntime
@layout AdminLayout
@rendermode InteractiveServer

<section class="reviews-page">
    <header class="reviews-header d-flex justify-content-between align-items-center flex-wrap gap-3 mb-4">
        <h1 class="m-0"><i class="bi bi-chat-square-text me-2"></i> Reviews</h1>

        <div class="d-flex gap-3 flex-wrap">
            <input class="form-control search-box" placeholder="Search by user name..." @oninput="OnSearchChanged" />

            <select class="form-select rating-filter" @onchange="OnRatingFilterChanged">
                <option value="">All Ratings</option>
                @for (int i = 5; i >= 1; i--)
                {
                    <option value="@i">@i star@(i > 1 ? "s" : "")</option>
                }
            </select>
        </div>
    </header>


    @if (filteredReviews == null || !filteredReviews.Any())
    {
        <div class="empty-message">
            <i class="bi bi-emoji-frown fs-1"></i>
            <p class="mt-3 text-muted">No reviews found.</p>
        </div>
    }
    else
    {
        <div class="reviews-list">
            @foreach (var review in filteredReviews)
            {
                <div class="review-block shadow-sm">
                    <div class="review-header">
                        <div>
                            <div class="review-user">@review.User.FullName</div>
                            <div class="review-date">@review.CreatedAt.ToLocalTime():dd MMM yyyy</div>
                        </div>
                        <div class="review-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi @(i <= review.Rating ? "bi-star-fill" : "bi-star") text-warning"></i>
                            }
                        </div>
                    </div>

                    <div class="review-body">
                        <div class="review-item">Item: <span class="fw-semibold">@review.Item.Name</span></div>
                        <div class="review-comment">@review.Comment</div>
                    </div>

                    <div class="text-end mt-2">
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="() => DeleteReview(review.ReviewId)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</section>

<style>
    .reviews-page {
        padding: 2rem;
        background-color: #f8f9fb;
    }

    .reviews-header h1 {
        font-size: 1.6rem;
        color: #333;
    }

    .reviews-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .review-block {
        background: white;
        border-radius: 12px;
        padding: 1.25rem 1.5rem;
        border-left: 5px solid #0d6efd;
    }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .review-user {
        font-weight: 600;
        font-size: 1.05rem;
        color: #0d6efd;
    }

    .review-date {
        font-size: 0.85rem;
        color: #999;
    }

    .review-rating i {
        font-size: 1rem;
        margin-right: 2px;
    }

    .review-body {
        padding-left: 4px;
        margin-top: 0.5rem;
    }

    .review-item {
        font-size: 0.95rem;
        color: #555;
        margin-bottom: 0.25rem;
    }

    .review-comment {
        font-size: 1rem;
        color: #333;
    }

    .empty-message {
        text-align: center;
        margin-top: 4rem;
        color: #777;
    }

    .search-box {
        min-width: 280px;
        padding: 10px 14px;
        font-size: 1rem;
        border-radius: 8px;
        border: 1px solid #ccc;
    }

    .rating-filter {
        min-width: 180px;
        padding: 10px 14px;
        font-size: 1rem;
        border-radius: 8px;
        border: 1px solid #ccc;
    }


    .btn-outline-danger {
        border: 1px solid #dc3545;
        color: #dc3545;
        font-weight: 500;
        padding: 6px 12px;
        border-radius: 6px;
        transition: all 0.2s ease-in-out;
    }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color:  white;
        }

</style>

@code {
    private List<ReviewDetailsDto> reviews = new();
    private List<ReviewDetailsDto> filteredReviews = new();

    private string searchTerm = string.Empty;
    private int? ratingFilter = null;

    protected override async Task OnInitializedAsync()
    {
        reviews = await ReviewService.GetAllWithDetailsAsync();
        FilterReviews();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterReviews();
    }

    private void OnRatingFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        ratingFilter = int.TryParse(value, out int r) ? r : null;
        FilterReviews();
    }

    private void FilterReviews()
    {
        filteredReviews = reviews
            .Where(r =>
                (string.IsNullOrWhiteSpace(searchTerm) || r.User.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (!ratingFilter.HasValue || r.Rating == ratingFilter.Value)
            ).ToList();
    }

    private async Task DeleteReview(Guid reviewId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this review?");
        if (confirmed)
        {
            await ReviewService.DeleteAsync(reviewId);
            reviews = await ReviewService.GetAllWithDetailsAsync();
            FilterReviews();
        }
    }
}
