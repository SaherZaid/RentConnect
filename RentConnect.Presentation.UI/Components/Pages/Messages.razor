@page "/messages"
@inject IChatService ChatService
@inject UserService UserService
@inject AuthenticationStateProvider AuthProvider
@using System.Security.Claims
@using global::RentConnect.API.RentConnect.Presentation.DTOs
@using global::RentConnect.Presentation.UI.IServices
@using global::RentConnect.Presentation.UI.Services
@rendermode InteractiveServer
@inject NavigationManager NavManager

<style>
    .chat-container {
        border: 1px solid #ddd;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
        height: 600px;
    }

    .chat-sidebar {
        background-color: #ffffff;
        border-right: 1px solid #eee;
        height: 100%;
        overflow-y: auto;
    }

        .chat-sidebar h5 {
            padding: 1rem;
            border-bottom: 1px solid #eee;
            font-weight: 600;
        }

        .chat-sidebar .list-group-item {
            border: none;
            border-bottom: 1px solid #f0f0f0;
            padding: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .chat-sidebar .list-group-item:hover {
                background-color: #f9f9f9;
            }

            .chat-sidebar .list-group-item.active {
                background-color: #e8f0fe;
                color: #0d6efd;
                font-weight: 600;
            }

    .chat-window {
        background-color: #fafbfc;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        padding: 1rem;
        background-color: #fff;
        border-bottom: 1px solid #eee;
        font-weight: 600;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
    }

    .chat-bubble {
        display: inline-block;
        padding: 10px 15px;
        border-radius: 20px;
        margin-bottom: 10px;
        max-width: 75%;
        word-break: break-word;
        font-size: 0.95rem;
    }

        .chat-bubble.mine {
            background-color: #0d6efd;
            color: white;
            align-self: flex-end;
        }

        .chat-bubble.theirs {
            background-color: #e4e6eb;
            color: #111;
            align-self: flex-start;
        }

    .chat-meta {
        font-size: 0.75rem;
        color: #888;
        margin-top: -4px;
        margin-bottom: 12px;
    }

    .chat-input {
        background-color: #fff;
        border-top: 1px solid #eee;
        padding: 0.75rem;
    }



    .list-group-item {
        transition: all 0.2s ease-in-out;
    }

        .list-group-item:hover {
            background-color: #f8f9fa;
            transform: translateX(2px);
        }

        .list-group-item.active {
            background-color: #e9f2ff !important;
            border-left: 5px solid #0d6efd  !important;
        }
</style>



<PageTitle>Messages</PageTitle>

<div class="container my-5">
    <div class="row chat-container">
        <div class="col-md-4 chat-sidebar">
            <h5>Chats</h5>
            <ul class="list-group list-group-flush">
                @foreach (var convo in conversations)
                {
                    <li class="list-group-item px-3 py-2 @(selectedConversation?.ConversationId == convo.ConversationId ? "active" : "")"
                        style="border-left: 5px solid @(convo.UnreadCount > 0 ? "#dc3545" : "transparent"); border-radius: 0;"
                        @onclick="() => LoadMessages(convo)">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <div class="fw-bold d-flex align-items-center">
                                    @convo.Participant
                                    @if (convo.UnreadCount > 0)
                                    {
                                        <span class="badge bg-danger text-white rounded-pill ms-2" style="font-size: 0.7rem; padding: 4px 8px;">
                                            @convo.UnreadCount
                                        </span>
                                    }
                                </div>
                                <div class="text-muted small">@convo.LastMessage</div>
                            </div>
                            <div class="text-muted small text-nowrap">
                                @convo.LastTimestamp?.ToLocalTime().ToString("HH:mm")
                            </div>
                        </div>
                    </li>

                }
            </ul>
        </div>

        <div class="col-md-8 chat-window">
            @if (selectedConversation != null)
            {
                <div class="chat-header">
                    Chat with @selectedConversation.Participant
                </div>

                <div class="chat-messages">
                    @foreach (var msg in messages)
                    {
                        <div class="chat-bubble @(msg.SenderId == currentUserId ? "mine" : "theirs")">
                            @msg.Content
                        </div>
                        <div class="chat-meta @(msg.SenderId == currentUserId ? "text-end" : "text-start")">
                            @msg.Timestamp.ToLocalTime().ToString("HH:mm")
                        </div>
                    }
                </div>

                <div class="chat-input">
                    <div class="input-group">
                        <input class="form-control" placeholder="Type a message..." @bind="newMessage" @bind:event="oninput" />
                        <button class="btn btn-primary" @onclick="SendMessage">Send</button>
                    </div>
                </div>
            }
            else
            {
                <div class="chat-header text-center text-muted">
                    Select a conversation to start chatting
                </div>
            }
        </div>
    </div>
</div>


@code {
    private string? currentUserId;
    private List<ConversationDto> conversations = new();
    private ConversationDto? selectedConversation;
    private List<MessageDto> messages = new();
    private string newMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        currentUserId = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(currentUserId))
        {
            conversations = (await ChatService.GetUserConversationsAsync(currentUserId))
                .OrderByDescending(c => c.LastTimestamp)
                .ToList();

            foreach (var convo in conversations)
            {
                var user = await UserService.GetUserByIdAsync(convo.ParticipantId);
                convo.Participant = user?.FullName ?? "Unknown";
            }

            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("receiverId", out var receiverIdVal) &&
                query.TryGetValue("itemId", out var itemIdVal) &&
                Guid.TryParse(itemIdVal, out var parsedItemId) &&
                !string.IsNullOrWhiteSpace(receiverIdVal))
            {
                try
                {
                    var convo = await ChatService.GetOrCreateConversationAsync(parsedItemId, currentUserId, receiverIdVal!);

                    if (!conversations.Any(c => c.ConversationId == convo.ConversationId))
                    {
                        var user = await UserService.GetUserByIdAsync(receiverIdVal!);
                        conversations.Add(new ConversationDto
                            {
                                ConversationId = convo.ConversationId,
                                ItemId = convo.ItemId,
                                ParticipantId = receiverIdVal!,
                                Participant = user?.FullName ?? "Unknown",
                                LastMessage = convo.LastMessage,
                                LastTimestamp = convo.LastTimestamp
                            });
                    }

                    await LoadMessages(convo);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error creating or loading conversation: {ex.Message}");
                }
            }
        }

    }


    private async Task LoadMessages(ConversationDto convo)
    {
        selectedConversation = convo;

        // نحدث الرسائل ونصفر العداد
        messages = await ChatService.GetMessagesByConversationIdAsync(convo.ConversationId, currentUserId!);

        // نصفر عدد الرسائل الغير مقروءة لهذا الشخص
        var target = conversations.FirstOrDefault(c => c.ConversationId == convo.ConversationId);
        if (target != null)
            target.UnreadCount = 0;
    }

    private async Task SendMessage()
    {
        if (selectedConversation == null || string.IsNullOrWhiteSpace(newMessage) || currentUserId == null)
            return;

        var message = new MessageDto
            {
                ItemId = selectedConversation.ItemId,
                SenderId = currentUserId,
                ReceiverId = selectedConversation.ParticipantId,
                Content = newMessage,
                Timestamp = DateTime.UtcNow
            };

        await ChatService.SendMessageAsync(message);
        messages.Add(message);
        newMessage = "";
    }
}
